"use client";

import React, { useState, useEffect } from 'react';
import { Card } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Search, Clock, Globe } from 'lucide-react';
import QuoteCard from '@/components/QuoteCard';

type MarketData = {
  symbol: string;
  name: string;
  price: number;
  change: number;
  changePercent: number;
  historicalData?: number[];
  category: string;
};

export default function IndicesPage() {
  const [searchQuery, setSearchQuery] = useState('');
  const [marketData, setMarketData] = useState<{
    us: MarketData[];
    europe: MarketData[];
    asia: MarketData[];
    crypto: MarketData[];
    rates: MarketData[];
  }>({
    us: [],
    europe: [],
    asia: [],
    crypto: [],
    rates: []
  });

  useEffect(() => {
    const fetchData = async () => {
      try {
        const response = await fetch('/api/market-data');
        const data = await response.json();
        
        // Organizar dados por categoria
        const organized = {
          us: data.filter((item: MarketData) => item.category === 'US'),
          europe: data.filter((item: MarketData) => item.category === 'Europe'),
          asia: data.filter((item: MarketData) => item.category === 'Asia'),
          crypto: data.filter((item: MarketData) => item.category === 'Crypto'),
          rates: data.filter((item: MarketData) => item.category === 'Rates')
        };
        
        setMarketData(organized);
      } catch (error) {
        console.error('Erro ao buscar dados:', error);
      }
    };

    fetchData();
    const interval = setInterval(fetchData, 40000); // Atualizar a cada 40 segundos

    return () => clearInterval(interval);
  }, []);

  // Dados estáticos para demonstração
  const usMarketData: MarketData[] = [
    {
      symbol: "^GSPC",
      name: "S&P 500",
      price: 6461.72,
      change: 15.96,
      changePercent: 0.25,
      category: "US"
    },
    {
      symbol: "^DJI",
      name: "Dow 30",
      price: 44891.85,
      change: 433.24,
      changePercent: 0.97,
      category: "US"
    },
    {
      symbol: "^IXIC",
      name: "Nasdaq",
      price: 21714.22,
      change: 32.31,
      changePercent: 0.15,
      category: "US"
    },
    {
      symbol: "^RUT",
      name: "Russell 2000",
      price: 2320.40,
      change: 37.62,
      changePercent: 1.65,
      category: "US"
    },
    {
      symbol: "^VIX",
      name: "VIX",
      price: 14.46,
      change: -0.27,
      changePercent: -1.83,
      category: "US"
    }
  ];

  const ratesData: MarketData[] = [
    {
      symbol: "GC=F",
      name: "Gold",
      price: 3403.20,
      change: 4.20,
      changePercent: 0.12,
      category: "Rates"
    },
    {
      symbol: "SI=F",
      name: "Silver",
      price: 23.15,
      change: 0.15,
      changePercent: 0.65,
      category: "Rates"
    },
    {
      symbol: "CL=F",
      name: "Crude Oil",
      price: 82.45,
      change: -0.75,
      changePercent: -0.90,
      category: "Rates"
    }
  ];

  return (
    <div className="min-h-screen bg-gray-50 py-6">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        {/* Search Bar */}
        <div className="mb-6">
          <div className="relative">
            <Input
              type="text"
              placeholder="Quote Lookup"
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              className="pl-10 pr-4 py-2 border border-gray-300 rounded-full w-full max-w-md"
            />
            <Search className="absolute left-3 top-2.5 h-5 w-5 text-gray-400" />
          </div>
        </div>

        {/* Market Status */}
        <div className="flex items-center space-x-2 mb-4 text-sm text-gray-600">
          <Clock className="h-4 w-4" />
          <span>U.S. markets close in 40m</span>
        </div>

        {/* Market Data Grid */}
        <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
          {/* U.S. Markets */}
          <Card className="bg-white shadow-sm">
            <div className="p-4 border-b border-gray-100">
              <div className="flex items-center justify-between">
                <h2 className="text-lg font-semibold text-gray-900">US</h2>
                <Globe className="h-5 w-5 text-gray-400" />
              </div>
            </div>
            <div className="divide-y divide-gray-100">
              {usMarketData.map((item) => (
                <QuoteCard key={item.symbol} data={item} />
              ))}
            </div>
          </Card>

          {/* Europe */}
          <Card className="bg-white shadow-sm">
            <div className="p-4 border-b border-gray-100">
              <div className="flex items-center justify-between">
                <h2 className="text-lg font-semibold text-gray-900">Europe</h2>
                <Globe className="h-5 w-5 text-gray-400" />
              </div>
            </div>
            <div className="divide-y divide-gray-100">
              {marketData.europe.map((item) => (
                <QuoteCard key={item.symbol} data={item} />
              ))}
            </div>
          </Card>

          {/* Asia */}
          <Card className="bg-white shadow-sm">
            <div className="p-4 border-b border-gray-100">
              <div className="flex items-center justify-between">
                <h2 className="text-lg font-semibold text-gray-900">Asia</h2>
                <Globe className="h-5 w-5 text-gray-400" />
              </div>
            </div>
            <div className="divide-y divide-gray-100">
              {marketData.asia.map((item) => (
                <QuoteCard key={item.symbol} data={item} />
              ))}
            </div>
          </Card>

          {/* Cryptocurrencies */}
          <Card className="bg-white shadow-sm">
            <div className="p-4 border-b border-gray-100">
              <div className="flex items-center justify-between">
                <h2 className="text-lg font-semibold text-gray-900">Cryptocurrencies</h2>
                <Globe className="h-5 w-5 text-gray-400" />
              </div>
            </div>
            <div className="divide-y divide-gray-100">
              {marketData.crypto.map((item) => (
                <QuoteCard key={item.symbol} data={item} />
              ))}
            </div>
          </Card>

          {/* Rates */}
          <Card className="bg-white shadow-sm">
            <div className="p-4 border-b border-gray-100">
              <div className="flex items-center justify-between">
                <h2 className="text-lg font-semibold text-gray-900">Rates</h2>
                <Globe className="h-5 w-5 text-gray-400" />
              </div>
            </div>
            <div className="divide-y divide-gray-100">
              {ratesData.map((item) => (
                <QuoteCard key={item.symbol} data={item} />
              ))}
            </div>
          </Card>
        </div>
      </div>
    </div>
  );
}
