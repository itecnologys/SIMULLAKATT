"use client";

import React, { useState, Suspense, useEffect } from 'react';
import { Sparklines, SparklinesLine, SparklinesSpots } from 'react-sparklines';
import { Dialog, DialogContent, DialogTitle } from "@/components/ui/dialog";
import dynamic from 'next/dynamic';
import { Loader2, ExternalLink } from 'lucide-react';

// Carregamento dinâmico do TradingViewChart
const TradingViewChart = dynamic(
  () => import('./TradingViewChart'),
  { 
    loading: () => (
      <div className="w-full h-[500px] flex items-center justify-center">
        <Loader2 className="h-8 w-8 animate-spin text-blue-500" />
      </div>
    ),
    ssr: false
  }
);

type MarketData = {
  symbol: string;
  name: string;
  price: number;
  change: number;
  changePercent: number;
  historicalData?: number[];
  category: string;
};

// Função determinística para gerar dados históricos
const generateHistoricalData = (symbol: string, price: number, change: number): number[] => {
  const points = 20;
  const data: number[] = [];
  const trend = change > 0 ? 1 : -1;
  let currentPrice = price - change;
  
  // Usar o símbolo como seed para garantir consistência
  const seed = symbol.split('').reduce((acc, char) => acc + char.charCodeAt(0), 0);
  
  for (let i = 0; i < points; i++) {
    // Gerar variação pseudo-aleatória baseada no seed e posição
    const pseudoRandom = Math.sin(seed + i * 0.1) * 0.5 + 0.5;
    const randomVariation = (pseudoRandom - 0.5) * Math.abs(change) * 0.3;
    const point = currentPrice + (trend * Math.abs(change) * (i / points)) + randomVariation;
    data.push(Math.max(0, point)); // Garantir que não seja negativo
  }
  data.push(price);
  return data;
};

const generateDetailedHistoricalData = (symbol: string, price: number, change: number) => {
  const now = new Date();
  const data = [];
  const points = 100;
  const trend = change > 0 ? 1 : -1;
  let currentPrice = price - change;
  
  // Usar o símbolo como seed para garantir consistência
  const seed = symbol.split('').reduce((acc, char) => acc + char.charCodeAt(0), 0);
  
  for (let i = 0; i < points; i++) {
    const time = new Date(now.getTime() - (points - i) * 24 * 60 * 60 * 1000);
    const pseudoRandom = Math.sin(seed + i * 0.05) * 0.5 + 0.5;
    const randomVariation = (pseudoRandom - 0.5) * Math.abs(change) * 0.2;
    const point = currentPrice + (trend * Math.abs(change) * (i / points)) + randomVariation;
    
    data.push({
      time: time.toISOString(),
      value: Math.max(0, point)
    });
  }
  data.push({
    time: now.toISOString(),
    value: price
  });
  return data;
};

const QuoteCard: React.FC<{ data: MarketData }> = ({ data }) => {
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [historicalData, setHistoricalData] = useState<number[]>([]);
  const [isClient, setIsClient] = useState(false);

  useEffect(() => {
    setIsClient(true);
    // Gerar dados históricos apenas no cliente para evitar diferenças de hidratação
    const historicalDataGenerated = generateHistoricalData(data.symbol, data.price, data.change);
    setHistoricalData(historicalDataGenerated);
  }, [data.symbol, data.price, data.change]);

  const handleOpenModal = () => {
    setIsModalOpen(true);
  };

  const handleCloseModal = () => {
    setIsModalOpen(false);
  };

  const getChangeColor = (change: number) => {
    return change >= 0 ? '#059669' : '#dc2626';
  };

  const getChangeIcon = (change: number) => {
    return change >= 0 ? '↗' : '↘';
  };

  return (
    <>
      <div 
        className="quote-card p-4 border rounded-lg hover:shadow-md transition-shadow cursor-pointer bg-white"
        onClick={handleOpenModal}
      >
        <div className="flex items-center justify-between mb-3">
          <div>
            <h3 className="font-semibold text-gray-900">{data.symbol}</h3>
            <p className="text-sm text-gray-600">{data.name}</p>
          </div>
          <div className="text-right">
            <div className="text-lg font-bold text-gray-900">
              ${data.price.toFixed(2)}
            </div>
            <div className={`text-sm font-medium ${data.change >= 0 ? 'text-green-600' : 'text-red-600'}`}>
              {getChangeIcon(data.change)} {data.change >= 0 ? '+' : ''}{data.change.toFixed(2)} ({data.changePercent.toFixed(2)}%)
            </div>
          </div>
        </div>
        
        <div className="w-20 h-8">
          {isClient && historicalData.length > 0 && (
            <Sparklines data={historicalData} width={80} height={32} margin={0}>
              <SparklinesLine style={{ stroke: getChangeColor(data.change), strokeWidth: 1, fill: "none" }} />
              <SparklinesSpots size={1} style={{ stroke: getChangeColor(data.change), strokeWidth: 1, fill: "white" }} />
            </Sparklines>
          )}
        </div>
        
        <div className="mt-2 text-xs text-gray-500">
          Vol: {data.volume?.toLocaleString() || 'N/A'}
        </div>
      </div>

      <Dialog open={isModalOpen} onOpenChange={setIsModalOpen}>
        <DialogContent className="max-w-4xl max-h-[90vh] overflow-y-auto">
        <DialogTitle className="sr-only">Detalhes do Indicador</DialogTitle>
          <div className="space-y-4">
            <div className="flex items-center justify-between">
              <div>
                <h2 className="text-2xl font-bold text-gray-900">{data.symbol}</h2>
                <p className="text-gray-600">{data.name}</p>
              </div>
              <div className="text-right">
                <div className="text-3xl font-bold text-gray-900">
                  ${data.price.toFixed(2)}
                </div>
                <div className={`text-lg font-medium ${data.change >= 0 ? 'text-green-600' : 'text-red-600'}`}>
                  {getChangeIcon(data.change)} {data.change >= 0 ? '+' : ''}{data.change.toFixed(2)} ({data.changePercent.toFixed(2)}%)
                </div>
              </div>
            </div>
            
            <div className="border-t pt-4">
              <h3 className="text-lg font-semibold mb-4">Gráfico Detalhado</h3>
              <Suspense fallback={<div className="h-[400px] flex items-center justify-center"><Loader2 className="h-8 w-8 animate-spin" /></div>}>
                <TradingViewChart 
                  symbol={data.symbol} 
                  historicalData={generateDetailedHistoricalData(data.symbol, data.price, data.change)}
                />
              </Suspense>
            </div>
            
            <div className="grid grid-cols-2 gap-4 text-sm">
              <div>
                <span className="text-gray-600">Volume:</span>
                <span className="ml-2 font-medium">{data.volume?.toLocaleString() || 'N/A'}</span>
              </div>
              <div>
                <span className="text-gray-600">Categoria:</span>
                <span className="ml-2 font-medium">{data.category}</span>
              </div>
            </div>
          </div>
        </DialogContent>
      </Dialog>
    </>
  );
};

export default QuoteCard;
